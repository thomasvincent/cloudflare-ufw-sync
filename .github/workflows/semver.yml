name: Semantic Versioning

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  update-version:
    name: Update version and create tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_TOKEN }}
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools-scm toml
      
      - name: Get current version
        id: current_version
        run: |
          # Get current version from setup.py or package metadata
          VERSION=$(python setup.py --version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Determine new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.version }}
          BUMP_TYPE=${{ github.event.inputs.bump_type }}
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          if [ "$BUMP_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update version in setup.py
        run: |
          sed -i "s/version=['\"][0-9]*\.[0-9]*\.[0-9]*['\"],/version=\"${{ steps.new_version.outputs.version }}\",/g" setup.py
      
      - name: Update CHANGELOG.md
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          CHANGELOG_TEMP=$(mktemp)
          
          # Extract content up to the first version header or create new file
          if grep -q "^## " CHANGELOG.md; then
            sed -n '1,/^## /p' CHANGELOG.md | head -n -1 > "$CHANGELOG_TEMP"
          else
            echo "# Changelog" > "$CHANGELOG_TEMP"
            echo "" >> "$CHANGELOG_TEMP"
          fi
          
          # Add new version header
          echo -e "## ${{ steps.new_version.outputs.version }} ($(date +%Y-%m-%d))\n" >> "$CHANGELOG_TEMP"
          
          # Add commits since last version
          echo "### Changes" >> "$CHANGELOG_TEMP"
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # If no previous tag, get all commits
            git log --pretty=format:"- %s" >> "$CHANGELOG_TEMP"
          else
            # Get all commits since the last tag
            git log --pretty=format:"- %s" $LAST_TAG..HEAD >> "$CHANGELOG_TEMP"
          fi
          
          echo -e "\n" >> "$CHANGELOG_TEMP"
          
          # Append the rest of the existing changelog if it exists
          if grep -q "^## " CHANGELOG.md; then
            sed -n '/^## /,$p' CHANGELOG.md >> "$CHANGELOG_TEMP"
          fi
          
          # Replace the original changelog
          mv "$CHANGELOG_TEMP" CHANGELOG.md
      
      - name: Commit and tag new version
        run: |
          git add setup.py CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
          git tag -a "v${{ steps.new_version.outputs.version }}" -m "Release v${{ steps.new_version.outputs.version }}"
          git push --follow-tags