name: Semantic Versioning

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump to apply'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  bump_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver packaging
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Get current version
        id: current_version
        run: |
          VERSION=$(grep -m 1 __version__ src/cloudflare_ufw_sync/__init__.py | cut -d '"' -f 2)
          echo "Current version: $VERSION"
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          
          python -c "
          import semver
          current = '$CURRENT_VERSION'
          bump_type = '$VERSION_TYPE'
          
          if bump_type == 'patch':
              new_version = semver.bump_patch(current)
          elif bump_type == 'minor':
              new_version = semver.bump_minor(current)
          elif bump_type == 'major':
              new_version = semver.bump_major(current)
          else:
              raise ValueError(f'Invalid version bump type: {bump_type}')
              
          print(f'New version: {new_version}')
          with open('new_version.txt', 'w') as f:
              f.write(new_version)
          "
          
          NEW_VERSION=$(cat new_version.txt)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in all relevant files
          sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" src/cloudflare_ufw_sync/__init__.py
          sed -i "s/version=\"$CURRENT_VERSION\"/version=\"$NEW_VERSION\"/" setup.py
      
      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # No previous tag, get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            # Get commits since previous tag
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Escape newlines for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
      
      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          RELEASE_DATE=$(date +"%Y-%m-%d")
          CHANGELOG="${{ steps.changelog.outputs.changelog }}"
          CHANGELOG="${CHANGELOG//'%25'/'%'}"
          CHANGELOG="${CHANGELOG//'%0A'/$'\n'}"
          CHANGELOG="${CHANGELOG//'%0D'/$'\r'}"
          
          # Prepend new version to CHANGELOG.md
          echo -e "# $NEW_VERSION ($RELEASE_DATE)\n\n$CHANGELOG\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
      
      - name: Commit changes
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          git add src/cloudflare_ufw_sync/__init__.py setup.py CHANGELOG.md
          git commit -m "chore: bump version to $NEW_VERSION"
      
      - name: Push changes
        run: |
          git push origin HEAD:main
      
      - name: Create tag
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.bump_version.outputs.new_version }}"
          name: "v${{ steps.bump_version.outputs.new_version }}"
          body: "${{ steps.changelog.outputs.changelog }}"
          generate_release_notes: true
          draft: false